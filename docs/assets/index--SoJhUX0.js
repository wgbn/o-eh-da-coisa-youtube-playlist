(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))a(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&a(c)}).observe(document,{childList:!0,subtree:!0});function t(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(r){if(r.ep)return;r.ep=!0;const s=t(r);fetch(r.href,s)}})();const Q="PL5DFl3pSRD__6vNCPZXtStCzWsNpy15sW",Z="AIzaSyAz83_h8uIcKDQ0Nn2EujLs77-uYWM-G4A",E="watchedVideos",O="youtube_last_page_token",V="youtube_last_update_timestamp";function ee(e){try{localStorage.setItem(O,e),localStorage.setItem(V,Date.now().toString())}catch(o){console.error("Erro ao salvar pageToken:",o)}}function U(){try{return localStorage.getItem(O)}catch(e){return console.error("Erro ao recuperar pageToken:",e),null}}function oe(){try{const e=localStorage.getItem(V);return e?parseInt(e):null}catch(e){return console.error("Erro ao recuperar timestamp:",e),null}}function te(e=24){const o=oe(),t=U();if(!o||!t)return!0;const a=e*60*60*1e3;return Date.now()-o>a}function P(){try{localStorage.removeItem(O),localStorage.removeItem(V)}catch(e){console.error("Erro ao limpar pageToken:",e)}}const N="youtubePlaylistDB",$=2,b="videoCache",S="youtube_videos_cache_timestamp",R=24,C="youtube_videos_cache";async function ae(){return new Promise(e=>{const o=indexedDB.open(N);o.onsuccess=t=>{const a=t.target.result,r=a.version;if(a.close(),r<$){console.log(`Versão do banco (${r}) é menor que a necessária (${$}). Deletando banco...`);const s=indexedDB.deleteDatabase(N);s.onsuccess=()=>{console.log("Banco de dados deletado com sucesso para atualização"),e(!0)},s.onerror=c=>{console.error("Erro ao deletar banco de dados:",c.target.error),e(!1)}}else console.log(`Versão do banco (${r}) é compatível com a necessária (${$})`),e(!1)},o.onerror=()=>{console.log("Erro ao verificar banco de dados, provavelmente não existe"),e(!1)}})}async function B(){try{return await ae(),new Promise((e,o)=>{const t=indexedDB.open(N,$);t.onupgradeneeded=a=>{const r=a.target.result;r.objectStoreNames.contains(b)||(r.createObjectStore(b,{keyPath:"id"}),console.log("Object store para cache de vídeos criado")),r.objectStoreNames.contains("watchedVideos")||(r.createObjectStore("watchedVideos",{keyPath:"id"}),console.log("Object store para vídeos assistidos criado"))},t.onsuccess=a=>{console.log("Banco de dados IndexedDB aberto com sucesso"),e(a.target.result)},t.onerror=a=>{console.error("Erro ao abrir banco de dados IndexedDB:",a.target.error),o(a.target.error)}})}catch(e){throw console.error("Erro ao inicializar banco de dados:",e),e}}async function re(e){try{const t=(await B()).transaction([b],"readwrite"),a=t.objectStore(b);return a.clear(),e.forEach(r=>{a.put(r)}),localStorage.setItem(S,Date.now().toString()),console.log(`${e.length} vídeos salvos no cache IndexedDB`),new Promise((r,s)=>{t.oncomplete=()=>r(),t.onerror=c=>{console.error("Erro na transação IndexedDB:",c.target.error),s(c.target.error)}})}catch(o){console.error("Erro ao salvar vídeos no cache IndexedDB:",o);try{localStorage.setItem(C,JSON.stringify(e)),localStorage.setItem(S,Date.now().toString()),console.log(`Fallback: ${e.length} vídeos salvos no localStorage`)}catch(t){console.error("Erro no fallback para localStorage:",t)}}}async function q(){try{const e=localStorage.getItem(S);if(!e)return console.log("Nenhum timestamp de cache encontrado"),null;const o=Date.now()-parseInt(e),t=R*60*60*1e3;if(o>t)return console.log("Cache de vídeos expirado"),null;const c=(await B()).transaction([b],"readonly").objectStore(b).getAll();return new Promise((n,d)=>{c.onsuccess=h=>{const p=h.target.result;if(!p||p.length===0){console.log("Nenhum vídeo encontrado no cache IndexedDB"),n(null);return}const f=p.map(l=>{try{return{...l,publishedAt:new Date(l.publishedAt)}}catch(i){return console.warn(`Erro ao converter data para o vídeo ${l.id}: ${i.message}`),{...l,publishedAt:new Date}}});console.log(`${p.length} vídeos recuperados do cache IndexedDB (idade: ${j()||0} horas)`),n(f)},c.onerror=h=>{console.error("Erro ao recuperar vídeos do cache IndexedDB:",h.target.error);try{const p=localStorage.getItem(C);if(!p){console.log("Nenhum vídeo encontrado no fallback localStorage"),n(null);return}const f=JSON.parse(p),l=f.map(i=>({...i,publishedAt:new Date(i.publishedAt)}));console.log(`Fallback: ${f.length} vídeos recuperados do localStorage`),n(l)}catch(p){console.error("Erro no fallback para localStorage:",p),n(null)}}})}catch(e){return console.error("Erro ao recuperar vídeos do cache:",e),null}}async function se(){try{const o=(await B()).transaction([b],"readwrite");return o.objectStore(b).clear(),localStorage.removeItem(S),localStorage.removeItem(C),console.log("Cache de vídeos limpo"),new Promise((a,r)=>{o.oncomplete=()=>a(),o.onerror=s=>r(s.target.error)})}catch(e){console.error("Erro ao limpar cache de vídeos:",e);try{localStorage.removeItem(C),localStorage.removeItem(S)}catch(o){console.error("Erro ao limpar cache do localStorage:",o)}}}async function ne(){try{const e=localStorage.getItem(S);if(!e)return!1;const o=Date.now()-parseInt(e),t=R*60*60*1e3;if(o>t)return!1;const c=(await B()).transaction([b],"readonly").objectStore(b).count();return new Promise(n=>{c.onsuccess=()=>{const d=c.result;n(d>0)},c.onerror=()=>{try{const d=localStorage.getItem(C);n(!!d)}catch{n(!1)}}})}catch(e){return console.error("Erro ao verificar validade do cache:",e),!1}}function j(){try{const e=localStorage.getItem(S);if(!e)return null;const o=Date.now()-parseInt(e);return Math.round(o/(60*60*1e3)*10)/10}catch(e){return console.error("Erro ao calcular idade do cache:",e),null}}const ce=new CustomEvent("proxyUsed",{detail:{message:"Usando proxy para acessar a API do YouTube"}}),ie=new CustomEvent("proxySuccess",{detail:{message:"Conexão estabelecida com sucesso via proxy"}}),de=[e=>`https://corsproxy.io/?${encodeURIComponent(e)}`,e=>`https://api.allorigins.win/raw?url=${encodeURIComponent(e)}`,e=>`https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(e)}`];async function z(e=!1,o=!0){try{if(o&&!e&&await ne()){const u=await q();if(u){console.log(`Usando ${u.length} vídeos do cache local`);const I=u.filter(m=>m&&m.id&&m.title&&m.thumbnail&&m.publishedAt instanceof Date);I.length!==u.length&&console.warn(`${u.length-I.length} vídeos no cache tinham formato inválido e foram filtrados`);const v=j();return document.dispatchEvent(new CustomEvent("usandoCache",{detail:{message:`Usando vídeos em cache (${v}h atrás)`,count:I.length}})),{videos:I,newVideosCount:0}}}e&&await se();let t=[],a=!1,r=0,s="",c="",n=0;const d=100,h=e||te(),p=await q();if(!p||p.length===0)console.log("Primeiro carregamento ou cache vazio. Carregando playlist completa..."),P(),document.dispatchEvent(new CustomEvent("carregandoPlaylistCompleta",{detail:{message:"Carregando playlist completa. Isso pode levar algum tempo..."}}));else if(h)e&&(P(),console.log("Forçando atualização completa da playlist"));else{const i=U();i&&(console.log("Usando pageToken armazenado:",i),s=i,a=!0,document.dispatchEvent(new CustomEvent("usandoTokenArmazenado",{detail:{message:"Buscando apenas novos vídeos da playlist"}})))}do{if(n>=d){console.warn(`Limite máximo de ${d} páginas atingido. Interrompendo para evitar possível loop.`),document.dispatchEvent(new CustomEvent("limitePaginasAtingido",{detail:{message:`Limite de ${d} páginas atingido. Alguns vídeos podem não ter sido carregados.`}}));break}if(n++,s===c&&s!==""){console.warn("Possível loop infinito detectado! Mesmo pageToken recebido duas vezes consecutivas."),P();break}c=s;const i=`https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=500&playlistId=${Q}&key=${Z}&pageToken=${s}`;let u,I=!1,v;try{u=await fetch(i),u.ok&&(I=!0)}catch(k){console.log("Erro na requisição direta:",k),v=k}if(!I){console.log("Tentando com proxies CORS..."),document.dispatchEvent(ce);for(const k of de)try{const x=k(i);if(console.log(`Tentando proxy: ${x}`),u=await fetch(x),u.ok){I=!0,console.log("Proxy funcionou com sucesso!"),document.dispatchEvent(ie);break}}catch(x){console.log("Erro com proxy:",x),v=x}}if(!I)throw v||new Error("Todos os métodos de acesso à API falharam");if(!u.ok)throw u.status===403?(console.error("Erro 403: Acesso negado à API do YouTube"),v=new Error("Acesso negado à API do YouTube (erro 403)"),document.dispatchEvent(new CustomEvent("erroAPI",{detail:{message:"Acesso negado à API do YouTube. Verifique sua chave de API.",code:403,tipo:"acesso_negado"}}))):u.status===404?(console.error("Erro 404: Playlist não encontrada"),v=new Error("Playlist não encontrada (erro 404)"),document.dispatchEvent(new CustomEvent("erroAPI",{detail:{message:"Playlist não encontrada. Verifique o ID da playlist.",code:404,tipo:"nao_encontrado"}}))):u.status===429?(console.error("Erro 429: Limite de requisições excedido"),v=new Error("Limite de requisições excedido (erro 429)"),document.dispatchEvent(new CustomEvent("erroAPI",{detail:{message:"Limite de requisições à API excedido. Tente novamente mais tarde.",code:429,tipo:"limite_excedido"}}))):(console.error(`Erro na API do YouTube: ${u.status}`),v=new Error(`Erro na API do YouTube: ${u.status}`),document.dispatchEvent(new CustomEvent("erroAPI",{detail:{message:`Erro ${u.status} ao acessar a API do YouTube.`,code:u.status,tipo:"erro_generico"}}))),v;const m=await u.json();if(m.error)throw new Error(`Erro da API: ${m.error.message||"Erro desconhecido"}`);(!m.items||!Array.isArray(m.items))&&(console.error("Resposta da API sem items válidos:",m),m.items=[]),(a||r>0)&&(r+=m.items.length),console.log(`Página ${n}/${d} carregada: ${m.items.length} vídeos (total: ${t.length+m.items.length})`),(n===1||n%5===0)&&document.dispatchEvent(new CustomEvent("progressoCarregamento",{detail:{message:`Carregando vídeos: ${t.length+m.items.length} vídeos até agora (página ${n})`,count:t.length+m.items.length,page:n}})),t=[...t,...m.items],m.nextPageToken?(console.log(`Novo pageToken recebido: ${m.nextPageToken}`),s=m.nextPageToken,ee(s)):(console.log("Fim da playlist alcançado. Limpando token e encerrando loop."),P(),s="")}while(s);const l=t.filter(i=>i.snippet&&i.snippet.thumbnails&&i.snippet.thumbnails.medium).map(i=>({id:i.snippet.resourceId.videoId,title:i.snippet.title,thumbnail:i.snippet.thumbnails.medium.url,publishedAt:new Date(i.snippet.publishedAt)})).sort((i,u)=>i.publishedAt-u.publishedAt);return a&&r>0&&document.dispatchEvent(new CustomEvent("novosVideosCarregados",{detail:{message:`${r} novos vídeos foram adicionados à playlist`,count:r}})),await re(l),{videos:l,newVideosCount:r}}catch(t){return console.error(`Erro na API do YouTube: ${t.message}`),document.dispatchEvent(new CustomEvent("erroAPI",{detail:{message:"Erro ao carregar vídeos da API do YouTube: "+t.message}})),{videos:[],newVideosCount:0}}}const le="youtubePlaylistDB",ue=2,w="watchedVideos";async function M(){return new Promise((e,o)=>{console.log("Inicializando IndexedDB...");const t=indexedDB.open(le,ue);t.onerror=a=>{console.error("Erro ao abrir o banco de dados:",a.target.error),o(a.target.error)},t.onsuccess=a=>{const r=a.target.result;console.log("IndexedDB inicializado com sucesso"),e(r)},t.onupgradeneeded=a=>{console.log("Atualizando estrutura do IndexedDB...");const r=a.target.result;r.objectStoreNames.contains(w)||(console.log(`Criando object store '${w}'`),r.createObjectStore(w,{keyPath:"id"})),me(r)},t.onblocked=a=>{console.warn("Conexão com IndexedDB bloqueada. Feche outras abas com esta aplicação.")}})}function me(e){console.log("Verificando dados no localStorage para migração...");const o=localStorage.getItem(E);if(o)try{const t=JSON.parse(o);if(console.log(`Encontrados ${t.length} vídeos assistidos no localStorage para migração`),t.length>0){const a=e.transaction(w,"readwrite"),r=a.objectStore(w);let s=0;t.forEach(c=>{const n=r.put({id:c});n.onsuccess=()=>{s++}}),a.oncomplete=()=>{console.log(`Migração concluída: ${s} de ${t.length} IDs migrados para IndexedDB`),localStorage.setItem(`${E}_backup`,o),localStorage.removeItem(E),console.log("Dados removidos do localStorage após migração bem-sucedida")},a.onerror=c=>{console.error("Erro durante a transação de migração:",c.target.error)}}}catch(t){console.error("Erro na migração de dados:",t)}else console.log("Nenhum dado encontrado no localStorage para migração")}async function Y(){try{console.log("Obtendo vídeos assistidos do IndexedDB...");const e=await M();return new Promise((o,t)=>{const s=e.transaction(w,"readonly").objectStore(w).getAll();s.onsuccess=()=>{const c=s.result,n=new Set(c.map(d=>d.id));console.log(`Recuperados ${n.size} vídeos assistidos do IndexedDB`),o(n)},s.onerror=c=>{console.error("Erro ao obter vídeos assistidos do IndexedDB:",c.target.error);const n=localStorage.getItem(`${E}_backup`);if(n){console.log("Usando dados de backup do localStorage");const h=new Set(JSON.parse(n));o(h);return}const d=localStorage.getItem(E);if(d){console.log("Usando dados do localStorage como fallback");const h=new Set(JSON.parse(d));o(h)}else console.log("Nenhum dado encontrado no localStorage, retornando conjunto vazio"),o(new Set)}})}catch(e){console.error("Erro ao acessar o banco de dados:",e);const o=localStorage.getItem(`${E}_backup`);if(o)return console.log("Usando dados de backup do localStorage devido a erro"),new Set(JSON.parse(o));const t=localStorage.getItem(E);return t?(console.log("Usando dados do localStorage como fallback devido a erro"),new Set(JSON.parse(t))):(console.log("Nenhum dado encontrado para fallback, retornando conjunto vazio"),new Set)}}async function F(e){try{console.log(`Salvando ${e.size} vídeos assistidos no IndexedDB...`);const t=(await M()).transaction(w,"readwrite"),a=t.objectStore(w),r=a.clear();return r.onsuccess=()=>{console.log("Object store limpo com sucesso, adicionando novos IDs...");const s=[...e];let c=0;s.forEach(n=>{const d=a.put({id:n});d.onsuccess=()=>{c++}})},t.oncomplete=()=>{console.log(`Vídeos assistidos salvos com sucesso no IndexedDB (${e.size} IDs)`),localStorage.setItem(`${E}_backup`,JSON.stringify([...e]))},t.onerror=s=>{console.error("Erro ao salvar vídeos assistidos no IndexedDB:",s.target.error),console.log("Usando localStorage como fallback para salvar os dados"),localStorage.setItem(E,JSON.stringify([...e]))},new Promise(s=>{t.oncomplete=()=>{s()},t.onerror=()=>{s()}})}catch(o){console.error("Erro ao acessar o banco de dados para salvar:",o),console.log("Usando localStorage como fallback devido a erro ao acessar o banco"),localStorage.setItem(E,JSON.stringify([...e]))}}let A=null;function ge(){try{A=new YT.Player("player",{height:"360",width:"640",playerVars:{playsinline:1,autoplay:1,enablejsapi:1},events:{onStateChange:pe}})}catch(e){console.log("# ERR Player",e.message)}}function L(e){document.getElementById("playerContainer").classList.remove("hidden"),console.log("# player",A),A&&A.loadVideoById?A.loadVideoById(e):setTimeout(()=>L(e),1e3)}function pe(e){if(e.data===0){const o=A.getVideoData().video_id,t=document.querySelector(`[data-video-id="${o}"]`);t&&!t.checked&&t.click(),he(o)}}function he(e){const o=Array.from(document.querySelectorAll(".video-item")).map(r=>({id:r.querySelector(".watch-checkbox").dataset.videoId,watched:r.querySelector(".watch-checkbox").checked})),t=o.findIndex(r=>r.id===e),a=o.slice(t+1).find(r=>!r.watched);a&&L(a.id)}const J="youtubePlaylistDB",T="watchedVideos";async function fe(){return new Promise((e,o)=>{const t=indexedDB.open(J);t.onerror=a=>{console.error("Erro ao abrir o banco de dados para exportação:",a.target.error),o(a.target.error)},t.onsuccess=a=>{const n=a.target.result.transaction(T,"readonly").objectStore(T).getAll();n.onsuccess=()=>{const d={videos:n.result,dataExportacao:new Date().toISOString(),versao:"1.0"},h=JSON.stringify(d),p=new Blob([h],{type:"application/json"}),f=URL.createObjectURL(p),l=document.createElement("a");l.href=f,l.download=`youtube-playlist-backup-${new Date().toISOString().slice(0,10)}.json`,l.style.display="none",document.body.appendChild(l),l.click(),setTimeout(()=>{document.body.removeChild(l),URL.revokeObjectURL(f)},100),e(d)},n.onerror=d=>{console.error("Erro ao exportar dados:",d.target.error),o(d.target.error)}}})}async function ye(e){return new Promise((o,t)=>{const a=new FileReader;a.onload=async r=>{try{const s=JSON.parse(r.target.result);if(!s.videos||!Array.isArray(s.videos)){t(new Error("Formato de arquivo inválido"));return}const c=indexedDB.open(J);c.onerror=n=>{console.error("Erro ao abrir o banco de dados para importação:",n.target.error),t(n.target.error)},c.onsuccess=n=>{const h=n.target.result.transaction(T,"readwrite"),p=h.objectStore(T);let f=0;s.videos.forEach(l=>{const i=p.put(l);i.onsuccess=()=>{f++}}),h.oncomplete=()=>{console.log(`Importação concluída: ${f} registros importados`),o(f)},h.onerror=l=>{console.error("Erro durante a importação de dados:",l.target.error),t(l.target.error)}}}catch(s){console.error("Erro ao processar o arquivo:",s),t(s)}},a.onerror=r=>{console.error("Erro ao ler o arquivo:",r),t(r)},a.readAsText(e)})}let y=new Set,D=!1,W=[];function ve(e){try{if(e instanceof Date&&!isNaN(e))return e.toLocaleDateString();if(typeof e=="string"){const o=new Date(e);if(!isNaN(o))return o.toLocaleDateString()}return"Data não disponível"}catch(o){return console.error("Erro ao formatar data:",o),"Data não disponível"}}async function Ee(){return y=await Y(),y}function K(e){const o=document.createElement("div");o.className=`video-item ${y.has(e.id)?"watched":""}`,o.innerHTML=`
        <img src="${e.thumbnail}" alt="${e.title}" class="video-thumbnail">
        <div class="video-info">
            <div class="video-title">${e.title}</div>
            <div class="video-date">${ve(e.publishedAt)}</div>
        </div>
        <input type="checkbox" class="watch-checkbox" 
               data-video-id="${e.id}"
               ${y.has(e.id)?"checked":""}>
    `;const t=o.querySelector(".watch-checkbox");return t.addEventListener("change",async()=>{t.checked?(y.add(e.id),o.classList.add("watched")):(y.delete(e.id),o.classList.remove("watched")),await F(y)}),o.querySelector(".video-thumbnail").addEventListener("click",()=>{L(e.id)}),o}async function H(e){W=e,await Ee(),_(),document.getElementById("markAllWatched").addEventListener("click",Ie),document.getElementById("playFirst").addEventListener("click",we),be()}function be(){const e=document.getElementById("exportData"),o=document.getElementById("importData"),t=document.getElementById("importFile");e.addEventListener("click",async()=>{try{e.disabled=!0,e.textContent="Exportando...",await fe(),g("Dados exportados com sucesso!","success")}catch(a){console.error("Erro ao exportar dados:",a),g("Erro ao exportar dados","error")}finally{e.disabled=!1,e.textContent="Exportar Dados"}}),o.addEventListener("click",()=>{t.click()}),t.addEventListener("change",async a=>{const r=a.target.files[0];if(r)try{o.disabled=!0,o.textContent="Importando...";const s=await ye(r);y=await Y(),_(),g(`${s} registros importados com sucesso!`,"success")}catch(s){console.error("Erro ao importar dados:",s),g("Erro ao importar dados: "+s.message,"error")}finally{o.disabled=!1,o.textContent="Importar Dados",t.value=""}})}function g(e,o="info",t=3e3){const a=document.createElement("div");a.className=`notification ${o}`,a.textContent=e,document.querySelector(".container").appendChild(a),setTimeout(()=>{a.classList.add("fade-out"),setTimeout(()=>{a.remove()},500)},t)}function _(){document.querySelectorAll(".video-item").forEach(e=>{const o=e.querySelector(".watch-checkbox"),t=o.dataset.videoId;y.has(t)?(e.classList.add("watched"),o.checked=!0):(e.classList.remove("watched"),o.checked=!1),e.classList.contains("watched")&&(e.style.display=D?"flex":"none")})}async function Ie(){const e=document.querySelectorAll(".watch-checkbox:not(:checked)");Array.from(e).map(t=>t.dataset.videoId).forEach(t=>y.add(t)),await F(y),_()}function we(){const e=W.find(o=>!y.has(o.id));e?L(e.id):alert("Todos os vídeos já foram assistidos!")}function Se(){D=!D;const e=document.getElementById("toggleWatched");e.textContent=D?"Ocultar Assistidos":"Mostrar Assistidos",document.querySelectorAll(".video-item.watched").forEach(o=>{o.style.display=D?"flex":"none"})}function G(e,o={}){const t=document.querySelector(".error-message");t&&t.remove();const a=document.createElement("div");a.className="error-message";let r=`
        <div class="error-header">
            <h3>Erro${o.codigo?` (${o.codigo})`:""}</h3>
            <button class="close-error">×</button>
        </div>
        <div class="error-body">
            <p>${e}</p>
    `;o.tipo&&(r+=`<p class="error-type">Tipo: ${o.tipo}</p>`),o.solucao&&(r+=`<p class="error-solution"><strong>Solução sugerida:</strong> ${o.solucao}</p>`),r+="</div>",a.innerHTML=r,document.querySelector(".container").appendChild(a),a.querySelector(".close-error").addEventListener("click",()=>{a.classList.add("fade-out"),setTimeout(()=>a.remove(),500)}),setTimeout(()=>a.classList.add("show"),10)}function Ae(){document.addEventListener("proxyUsed",e=>{g(e.detail.message,"info")}),document.addEventListener("proxySuccess",e=>{g(e.detail.message,"success")}),document.addEventListener("usandoTokenArmazenado",e=>{g(e.detail.message,"info")}),document.addEventListener("novosVideosCarregados",e=>{g(e.detail.message,"success",5e3)}),document.addEventListener("usandoCache",e=>{g(e.detail.message,"info",4e3)}),document.addEventListener("limitePaginasAtingido",e=>{g(e.detail.message,"warning",8e3)}),document.addEventListener("carregandoPlaylistCompleta",e=>{g(e.detail.message,"info",1e4)}),document.addEventListener("progressoCarregamento",e=>{g(e.detail.message,"info",5e3)}),document.addEventListener("erroAPI",e=>{g(e.detail.message,"error",1e4)})}async function xe(e=!1){const o=document.getElementById("loading");o.style.display="block",Ae();try{setTimeout(()=>ge(),3e3);const t=await z(e),a=Array.isArray(t)?t:t.videos,r=document.getElementById("videoList");a&&a.length>0?a.forEach(s=>{r.appendChild(K(s))}):console.log("Nenhum vídeo disponível para exibir"),await H(a),document.getElementById("toggleWatched").addEventListener("click",Se),document.getElementById("refreshPlaylist").addEventListener("click",De)}catch(t){const a=X(t);G(t.message,a)}finally{o.style.display="none"}}async function De(){const e=document.getElementById("refreshPlaylist"),o=e.textContent;try{e.disabled=!0,e.textContent="Atualizando...";const t=document.getElementById("videoList");t.innerHTML="";const a=document.getElementById("loading");a.style.display="block",g("Iniciando atualização completa da playlist...","info");const r=await z(!0),s=Array.isArray(r)?r:r.videos;s&&s.length>0?s.forEach(c=>{t.appendChild(K(c))}):(console.log("Nenhum vídeo disponível para exibir"),g("Nenhum vídeo disponível para exibir","warning")),!Array.isArray(r)&&r.newVideosCount&&g(`Total de ${s.length} vídeos carregados na playlist`,"info"),await H(s),g("Playlist atualizada com sucesso!","success")}catch(t){const a=X(t);G(`Erro ao atualizar playlist: ${t.message}`,a)}finally{e.disabled=!1,e.textContent=o,document.getElementById("loading").style.display="none"}}function X(e){const o={};return e.message.includes("API do YouTube")?(o.tipo="API YouTube",e.message.includes("403")?(o.codigo=403,o.solucao="Verifique se sua chave de API está correta e tem permissões adequadas."):e.message.includes("404")?(o.codigo=404,o.solucao="Verifique se o ID da playlist está correto."):e.message.includes("429")&&(o.codigo=429,o.solucao="Aguarde alguns minutos e tente novamente. A API do YouTube tem limites de requisições.")):e.message.includes("Failed to fetch")||e.message.includes("Network Error")?(o.tipo="Conexão",o.solucao="Verifique sua conexão com a internet e tente novamente."):e.message.includes("cache")?(o.tipo="Cache",o.solucao="Tente limpar o cache do navegador e recarregar a página."):e.message.includes("chave de API")&&(o.tipo="Configuração",o.solucao="Configure sua chave de API do YouTube no arquivo config.js."),o}xe();
